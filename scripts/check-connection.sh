#!/bin/bash

# Script para verificar conectividad con PostgreSQL
# √ötil para debugging de conexiones en EasyPanel

set -e

echo "üîç Verificando conectividad con PostgreSQL..."

# Funci√≥n para verificar variables de entorno
check_env_vars() {
    echo "üìã Verificando variables de entorno..."
    
    if [ -z "$DATABASE_URL" ]; then
        echo "‚ùå DATABASE_URL no est√° definida"
        exit 1
    else
        echo "‚úÖ DATABASE_URL est√° definida"
        echo "   URL: ${DATABASE_URL//:*/:****@*}"  # Ocultar contrase√±a
    fi
}

# Funci√≥n para extraer componentes de DATABASE_URL
parse_database_url() {
    echo "üîß Parseando DATABASE_URL..."
    
    # Extraer componentes usando sed
    DB_USER=$(echo $DATABASE_URL | sed -n 's/.*:\/\/\([^:]*\):.*/\1/p')
    DB_PASS=$(echo $DATABASE_URL | sed -n 's/.*:\/\/[^:]*:\([^@]*\)@.*/\1/p')
    DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\):.*/\1/p')
    DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')
    DB_NAME=$(echo $DATABASE_URL | sed -n 's/.*\/\([^?]*\).*/\1/p')
    
    echo "   Usuario: $DB_USER"
    echo "   Host: $DB_HOST"
    echo "   Puerto: $DB_PORT"
    echo "   Base de datos: $DB_NAME"
}

# Funci√≥n para verificar conectividad de red
check_network_connectivity() {
    echo "üåê Verificando conectividad de red..."
    
    if ping -c 1 "$DB_HOST" > /dev/null 2>&1; then
        echo "‚úÖ Host $DB_HOST es alcanzable"
    else
        echo "‚ùå No se puede alcanzar el host $DB_HOST"
        echo "   Verificar que ambos servicios est√©n en la misma red Docker"
        return 1
    fi
}

# Funci√≥n para verificar puerto
check_port() {
    echo "üîå Verificando puerto PostgreSQL..."
    
    if nc -z "$DB_HOST" "$DB_PORT" 2>/dev/null; then
        echo "‚úÖ Puerto $DB_PORT est√° abierto en $DB_HOST"
    else
        echo "‚ùå Puerto $DB_PORT no est√° abierto en $DB_HOST"
        return 1
    fi
}

# Funci√≥n para verificar conexi√≥n PostgreSQL
check_postgres_connection() {
    echo "üêò Verificando conexi√≥n PostgreSQL..."
    
    if pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" > /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL est√° listo para conexiones"
    else
        echo "‚ùå PostgreSQL no est√° listo"
        return 1
    fi
}

# Funci√≥n para verificar autenticaci√≥n
check_authentication() {
    echo "üîê Verificando autenticaci√≥n..."
    
    # Crear archivo temporal con credenciales
    export PGPASSWORD="$DB_PASS"
    
    if psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c "SELECT 1;" > /dev/null 2>&1; then
        echo "‚úÖ Autenticaci√≥n exitosa"
    else
        echo "‚ùå Error de autenticaci√≥n"
        echo "   Verificar usuario y contrase√±a"
        return 1
    fi
    
    unset PGPASSWORD
}

# Funci√≥n para verificar base de datos
check_database() {
    echo "üìä Verificando base de datos..."
    
    export PGPASSWORD="$DB_PASS"
    
    if psql -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER" -d "$DB_NAME" -c "SELECT current_database();" > /dev/null 2>&1; then
        echo "‚úÖ Conexi√≥n a base de datos exitosa"
    else
        echo "‚ùå No se puede conectar a la base de datos"
        return 1
    fi
    
    unset PGPASSWORD
}

# Funci√≥n principal
main() {
    echo "üöÄ Iniciando verificaci√≥n de conectividad..."
    echo ""
    
    # Verificar variables de entorno
    check_env_vars
    echo ""
    
    # Parsear URL
    parse_database_url
    echo ""
    
    # Verificar conectividad de red
    if ! check_network_connectivity; then
        echo "‚ùå Fall√≥ la verificaci√≥n de red"
        exit 1
    fi
    echo ""
    
    # Verificar puerto
    if ! check_port; then
        echo "‚ùå Fall√≥ la verificaci√≥n de puerto"
        exit 1
    fi
    echo ""
    
    # Verificar PostgreSQL
    if ! check_postgres_connection; then
        echo "‚ùå Fall√≥ la verificaci√≥n de PostgreSQL"
        exit 1
    fi
    echo ""
    
    # Verificar autenticaci√≥n
    if ! check_authentication; then
        echo "‚ùå Fall√≥ la verificaci√≥n de autenticaci√≥n"
        exit 1
    fi
    echo ""
    
    # Verificar base de datos
    if ! check_database; then
        echo "‚ùå Fall√≥ la verificaci√≥n de base de datos"
        exit 1
    fi
    echo ""
    
    echo "üéâ ¬°Todas las verificaciones pasaron exitosamente!"
    echo "‚úÖ La aplicaci√≥n puede conectarse a PostgreSQL"
}

# Ejecutar funci√≥n principal
main "$@"
