#!/usr/bin/env python3
"""
Script para limpiar todos los datos de la base de datos del Sistema POS
Mantiene solo el usuario administrador por defecto
"""
import sys
import os
import time
from datetime import datetime

# Agregar el directorio ra√≠z del proyecto al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy.orm import Session
from sqlalchemy import text
from app.database import get_db, create_tables
from app.models import *
from app.models.user import User, UserRole
from app.config import settings

def confirm_cleanup():
    """Solicitar confirmaci√≥n antes de limpiar la base de datos"""
    print("‚ö†Ô∏è  ADVERTENCIA: Este script eliminar√° TODOS los datos de la base de datos!")
    print("üìã Se eliminar√°n:")
    print("   - Todas las ventas y transacciones")
    print("   - Todos los productos y categor√≠as")
    print("   - Todos los clientes y cr√©ditos")
    print("   - Todo el inventario y movimientos")
    print("   - Todas las √≥rdenes y pedidos")
    print("   - Todos los proveedores y compras")
    print("   - Todas las mesas y ubicaciones")
    print("   - Todas las recetas")
    print("   - Todas las configuraciones del sistema")
    print("   - Todos los usuarios (excepto admin)")
    print()
    print("‚úÖ Se mantendr√°:")
    print("   - El usuario administrador (admin)")
    print("   - La estructura de las tablas")
    print()
    
    while True:
        response = input("¬øEst√°s seguro de que quieres continuar? (s√≠/no): ").lower().strip()
        if response in ['s√≠', 'si', 'yes', 'y', 's']:
            return True
        elif response in ['no', 'n']:
            return False
        else:
            print("Por favor, responde 's√≠' o 'no'")

def wait_for_database():
    """Esperar a que la base de datos est√© disponible"""
    print("üîÑ Verificando conexi√≥n a la base de datos...")
    max_attempts = 10
    attempt = 0
    
    while attempt < max_attempts:
        try:
            db = next(get_db())
            db.execute(text("SELECT 1"))
            db.close()
            print("‚úÖ Conexi√≥n a la base de datos establecida")
            return True
        except Exception as e:
            attempt += 1
            print(f"‚è≥ Intento {attempt}/{max_attempts}: {e}")
            time.sleep(2)
    
    print("‚ùå No se pudo conectar a la base de datos")
    return False

def clean_database():
    """Limpiar todos los datos de la base de datos"""
    print("üßπ Iniciando limpieza de la base de datos...")
    
    # Crear tablas si no existen
    create_tables()
    
    # Obtener sesi√≥n de base de datos
    db = next(get_db())
    
    try:
        # Desactivar restricciones de clave for√°nea temporalmente
        print("üîß Desactivando restricciones de clave for√°nea...")
        db.execute(text("SET session_replication_role = replica;"))
        
        # Lista de tablas a limpiar (en orden para evitar problemas de dependencias)
        tables_to_clean = [
            # Transacciones y ventas
            ("SaleItem", "Items de venta"),
            ("Sale", "Ventas"),
            ("Payment", "Pagos"),
            ("Credit", "Cr√©ditos"),
            
            # √ìrdenes y pedidos
            ("OrderItem", "Items de √≥rdenes"),
            ("Order", "√ìrdenes"),
            
            # Inventario y compras
            ("PurchaseItem", "Items de compras"),
            ("Purchase", "Compras"),
            ("InventoryMovement", "Movimientos de inventario"),
            
            # Recetas
            ("RecipeItem", "Items de recetas"),
            ("Recipe", "Recetas"),
            
            # Productos
            ("Product", "Productos"),
            ("SubCategory", "Subcategor√≠as"),
            ("Category", "Categor√≠as"),
            
            # Clientes y proveedores
            ("Customer", "Clientes"),
            ("Supplier", "Proveedores"),
            
            # Mesas y ubicaciones
            ("Table", "Mesas"),
            ("Location", "Ubicaciones"),
            
            # Configuraciones
            ("SystemSettings", "Configuraciones del sistema"),
            
            # Usuarios (excepto admin)
            ("User", "Usuarios (excepto admin)")
        ]
        
        total_tables = len(tables_to_clean)
        cleaned_count = 0
        
        for table_name, description in tables_to_clean:
            try:
                if table_name == "User":
                    # Para usuarios, eliminar todos excepto admin
                    deleted_count = db.query(User).filter(User.username != "admin").delete()
                    print(f"‚úÖ {description}: {deleted_count} registros eliminados")
                else:
                    # Para otras tablas, eliminar todos los registros
                    table_class = globals()[table_name]
                    deleted_count = db.query(table_class).delete()
                    print(f"‚úÖ {description}: {deleted_count} registros eliminados")
                
                cleaned_count += 1
                
            except Exception as e:
                print(f"‚ö†Ô∏è  Error limpiando {description}: {e}")
                continue
        
        # Reactivar restricciones de clave for√°nea
        print("üîß Reactivando restricciones de clave for√°nea...")
        db.execute(text("SET session_replication_role = DEFAULT;"))
        
        # Commit de todos los cambios
        db.commit()
        
        print(f"\nüéâ Limpieza completada!")
        print(f"üìä Tablas procesadas: {cleaned_count}/{total_tables}")
        
        # Verificar que el admin sigue existiendo
        admin_user = db.query(User).filter(User.username == "admin").first()
        if admin_user:
            print(f"‚úÖ Usuario admin preservado: {admin_user.username}")
        else:
            print("‚ö†Ô∏è  Usuario admin no encontrado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la limpieza: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def reset_sequences():
    """Resetear las secuencias de ID para que empiecen desde 1"""
    print("üîÑ Reseteando secuencias de ID...")
    
    db = next(get_db())
    
    try:
        # Lista de secuencias comunes
        sequences = [
            "users_id_seq",
            "products_id_seq", 
            "categories_id_seq",
            "subcategories_id_seq",
            "sales_id_seq",
            "sale_items_id_seq",
            "customers_id_seq",
            "suppliers_id_seq",
            "inventory_movements_id_seq",
            "orders_id_seq",
            "order_items_id_seq",
            "tables_id_seq",
            "locations_id_seq",
            "recipes_id_seq",
            "recipe_items_id_seq"
        ]
        
        for seq in sequences:
            try:
                db.execute(text(f"SELECT setval('{seq}', 1, false);"))
                print(f"‚úÖ Secuencia {seq} reseteada")
            except Exception as e:
                print(f"‚ö†Ô∏è  No se pudo resetear {seq}: {e}")
        
        db.commit()
        print("‚úÖ Secuencias reseteadas")
        
    except Exception as e:
        print(f"‚ùå Error reseteando secuencias: {e}")
        db.rollback()
    finally:
        db.close()

def show_database_status():
    """Mostrar el estado actual de la base de datos"""
    print("\nüìä Estado actual de la base de datos:")
    
    db = next(get_db())
    
    try:
        # Contar registros en cada tabla
        tables_info = [
            ("User", "Usuarios"),
            ("Product", "Productos"),
            ("Category", "Categor√≠as"),
            ("Sale", "Ventas"),
            ("Customer", "Clientes"),
            ("Supplier", "Proveedores"),
            ("Order", "√ìrdenes"),
            ("Table", "Mesas"),
            ("InventoryMovement", "Movimientos de inventario")
        ]
        
        for table_name, description in tables_info:
            try:
                table_class = globals()[table_name]
                count = db.query(table_class).count()
                print(f"   {description}: {count} registros")
            except Exception as e:
                print(f"   {description}: Error al contar - {e}")
        
    except Exception as e:
        print(f"‚ùå Error obteniendo estado: {e}")
    finally:
        db.close()

def main():
    """Funci√≥n principal"""
    print("=" * 60)
    print("üßπ SCRIPT DE LIMPIEZA DE BASE DE DATOS - SISTEMA POS")
    print("=" * 60)
    print(f"üìÖ Fecha y hora: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # Verificar conexi√≥n a la base de datos
    if not wait_for_database():
        print("‚ùå No se pudo conectar a la base de datos. Verifica la configuraci√≥n.")
        sys.exit(1)
    
    # Solicitar confirmaci√≥n
    if not confirm_cleanup():
        print("‚ùå Operaci√≥n cancelada por el usuario")
        sys.exit(0)
    
    print("\nüöÄ Iniciando proceso de limpieza...")
    
    # Limpiar base de datos
    if not clean_database():
        print("‚ùå Error durante la limpieza")
        sys.exit(1)
    
    # Resetear secuencias
    reset_sequences()
    
    # Mostrar estado final
    show_database_status()
    
    print("\n" + "=" * 60)
    print("‚úÖ LIMPIEZA COMPLETADA EXITOSAMENTE")
    print("=" * 60)
    print("üìã Resumen:")
    print("   - Todos los datos han sido eliminados")
    print("   - El usuario admin se ha preservado")
    print("   - Las secuencias de ID han sido reseteadas")
    print("   - La base de datos est√° lista para uso")
    print()
    print("üîë Credenciales del admin:")
    print("   Usuario: admin")
    print("   Contrase√±a: admin123")
    print()
    print("üöÄ Puedes reiniciar la aplicaci√≥n ahora")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå Operaci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        sys.exit(1)
