#!/usr/bin/env python3
"""
Script para configurar la contrase√±a de caja
"""
import sys
import os

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.database import SessionLocal
from app.services.settings_service import SettingsService

def configurar_caja():
    """Configurar la contrase√±a de caja"""
    print("=" * 60)
    print("üîß CONFIGURACI√ìN DE CAJA")
    print("=" * 60)
    
    db = SessionLocal()
    try:
        # 1. Verificar contrase√±a actual
        print("\n1Ô∏è‚É£ Verificando contrase√±a actual...")
        current_password = SettingsService.get_cash_register_password(db)
        print(f"   Contrase√±a actual: '{current_password}'")
        
        # 2. Configurar nueva contrase√±a
        print("\n2Ô∏è‚É£ Configurando nueva contrase√±a...")
        new_password = "1234"  # Contrase√±a est√°ndar
        
        SettingsService.set_cash_register_password(db, new_password)
        print(f"   ‚úÖ Contrase√±a configurada: '{new_password}'")
        
        # 3. Verificar que se guard√≥ correctamente
        print("\n3Ô∏è‚É£ Verificando configuraci√≥n...")
        stored_password = SettingsService.get_cash_register_password(db)
        print(f"   Contrase√±a almacenada: '{stored_password}'")
        
        if stored_password == new_password:
            print("   ‚úÖ Contrase√±a configurada correctamente!")
        else:
            print("   ‚ùå Error: La contrase√±a no se guard√≥ correctamente")
            
        # 4. Verificar otras configuraciones
        print("\n4Ô∏è‚É£ Verificando otras configuraciones...")
        require_cash_register = SettingsService.get_setting(db, "require_cash_register", "true")
        print(f"   Requiere caja: {require_cash_register}")
        
        # 5. Inicializar configuraciones por defecto si es necesario
        print("\n5Ô∏è‚É£ Inicializando configuraciones por defecto...")
        SettingsService.initialize_default_settings(db)
        print("   ‚úÖ Configuraciones inicializadas")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        db.close()
    
    print("\n" + "=" * 60)
    print("‚úÖ Configuraci√≥n completada")

if __name__ == "__main__":
    configurar_caja()
