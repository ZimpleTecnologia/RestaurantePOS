#!/usr/bin/env python3
"""
Script de prueba para verificar el sistema de autenticaci√≥n
"""
import requests
import json
import time
from datetime import datetime

# Configuraci√≥n
BASE_URL = "http://localhost:8000"
TEST_USERNAME = "admin"
TEST_PASSWORD = "admin123"

def test_login():
    """Probar el sistema de login"""
    print("üîê Probando sistema de login...")
    
    try:
        # Intentar login
        response = requests.post(
            f"{BASE_URL}/api/v1/auth/login-json",
            json={
                "username": TEST_USERNAME,
                "password": TEST_PASSWORD
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            token = data.get('access_token')
            print(f"‚úÖ Login exitoso - Token obtenido: {token[:20]}...")
            return token
        else:
            print(f"‚ùå Error en login: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def test_protected_pages(token):
    """Probar acceso a p√°ginas protegidas"""
    print("\nüîí Probando acceso a p√°ginas protegidas...")
    
    protected_pages = [
        "/",
        "/products",
        "/inventory",
        "/settings",
        "/reports"
    ]
    
    headers = {"Authorization": f"Bearer {token}"}
    
    for page in protected_pages:
        try:
            response = requests.get(f"{BASE_URL}{page}", headers=headers)
            if response.status_code == 200:
                print(f"‚úÖ {page} - Acceso permitido")
            else:
                print(f"‚ùå {page} - Acceso denegado: {response.status_code}")
        except Exception as e:
            print(f"‚ùå {page} - Error: {e}")

def test_unprotected_pages():
    """Probar acceso a p√°ginas no protegidas"""
    print("\nüåê Probando acceso a p√°ginas no protegidas...")
    
    unprotected_pages = [
        "/login",
        "/api/v1/",
        "/health"
    ]
    
    for page in unprotected_pages:
        try:
            response = requests.get(f"{BASE_URL}{page}")
            if response.status_code == 200:
                print(f"‚úÖ {page} - Acceso p√∫blico permitido")
            else:
                print(f"‚ùå {page} - Error: {response.status_code}")
        except Exception as e:
            print(f"‚ùå {page} - Error: {e}")

def test_middleware_redirect():
    """Probar redirecci√≥n del middleware"""
    print("\nüîÑ Probando redirecci√≥n del middleware...")
    
    try:
        # Intentar acceder a p√°gina protegida sin token
        response = requests.get(f"{BASE_URL}/", allow_redirects=False)
        
        if response.status_code == 302:
            print(f"‚úÖ Redirecci√≥n correcta: {response.status_code}")
            print(f"   Ubicaci√≥n: {response.headers.get('Location', 'No especificada')}")
        else:
            print(f"‚ùå No se redirigi√≥: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error probando redirecci√≥n: {e}")

def test_token_expiration():
    """Probar expiraci√≥n del token"""
    print("\n‚è∞ Probando expiraci√≥n del token...")
    
    try:
        # Crear un token con expiraci√≥n muy corta
        from app.auth.security import create_access_token
        from datetime import timedelta
        
        # Este test requiere acceso a los m√≥dulos de la aplicaci√≥n
        print("‚ÑπÔ∏è  Test de expiraci√≥n requiere acceso a m√≥dulos internos")
        print("   Se puede probar manualmente esperando que expire el token")
        
    except ImportError:
        print("‚ÑπÔ∏è  Test de expiraci√≥n requiere ejecutarse desde el contexto de la aplicaci√≥n")

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Iniciando pruebas del sistema de autenticaci√≥n")
    print("=" * 50)
    
    # Verificar que el servidor est√© corriendo
    try:
        health_check = requests.get(f"{BASE_URL}/health")
        if health_check.status_code != 200:
            print("‚ùå El servidor no est√° respondiendo correctamente")
            return
        print("‚úÖ Servidor respondiendo correctamente")
    except Exception as e:
        print(f"‚ùå No se puede conectar al servidor: {e}")
        print("   Aseg√∫rate de que la aplicaci√≥n est√© corriendo en http://localhost:8000")
        return
    
    # Ejecutar pruebas
    token = test_login()
    
    if token:
        test_protected_pages(token)
        test_unprotected_pages()
        test_middleware_redirect()
        test_token_expiration()
        
        print("\n" + "=" * 50)
        print("‚úÖ Todas las pruebas completadas")
        print("\nüìã Resumen de funcionalidades:")
        print("   ‚Ä¢ Login funcional")
        print("   ‚Ä¢ P√°ginas protegidas")
        print("   ‚Ä¢ Middleware de redirecci√≥n")
        print("   ‚Ä¢ Sistema de timeout configurado")
        
    else:
        print("\n‚ùå No se pudo obtener token, algunas pruebas fallaron")
    
    print("\nüîß Para probar el timeout por inactividad:")
    print("   1. Haz login en el navegador")
    print("   2. Espera 28 minutos (o ajusta la configuraci√≥n)")
    print("   3. Deber√≠as ver la advertencia de timeout")
    print("   4. Si no extiendes la sesi√≥n, se cerrar√° autom√°ticamente")

if __name__ == "__main__":
    main()

